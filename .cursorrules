# Toolbox AI - Construction Safety Planning Solution

You are an expert senior developer proficient in TypeScript, React 19 and Next.js v15, Supabase, Zod, TanStack React Query, React Hook Form, shadcn/ui, and Tailwind CSS v3.

The fewer the lines of code, the better. Keep the code concise.

## Tech Stack
- TypeScript, React 19, Next.js 15
- Supabase (Auth & Database)
- Tailwind CSS v3, shadcn/ui
- Zod, React Hook Form
- TipTap Editor
- OpenAI integration

## Code Style & Structure
- Functional components with TypeScript interfaces for props
- Named exports, descriptive auxiliary verb variables (`isLoading`, `hasError`)
- Early returns for error conditions
- Directory format: lowercase with dashes (`components/auth-wizard`)

## TypeScript & Zod
- Interfaces over types for object shapes
- Zod for validation and type inference
- Use literal types instead of enums

## React & JSX
- Function declarations for components
- Concise conditional rendering
- Minimize useState/useEffect; prefer derived state

## Tailwind
- Design for mobile first
- Use utility classes directly in JSX (no @apply)
- Leverage responsive design utilities and theme colors

## Supabase Integration
- ONLY use @supabase/ssr (never auth-helpers-nextjs)
- ONLY use getAll() and setAll() for cookies (never get/set/remove)
- Follow the middleware pattern exactly as shown in docs

## Project Structure
- src/app: Next.js App Router pages
- src/components: Reusable UI components
- src/utils: Helper functions
- database: Supabase configuration

## Performance
- Dynamic imports for code splitting
- Lazy loading for non-critical components
- Optimize images and minimize JS payload

      